// Pure LRU Implement
// LRU简介：最近最少使用（Least Recently Used）
// 实现：使用双向链表存储数据，头部是最近访问的，尾部是最久未访问的
// 访问：将访问的节点移动到头部
// 插入：如果缓存已满，删除尾部节点，将新节点插入头部
// 删除：如果缓存已满，删除尾部节点

// package main

import "sync"

// 双向链表节点
type LRUNode struct {
	key string
	value string
	prev *LRUNode
	next *LRUNode
}

// LRU缓存结构
type LRUCache struct {
	capacity int  
	size int
	cache map[string]*LRUNode // 哈希表 ： key -> 节点
	head *LRUNode // 虚拟头节点 （最近使用）
	tail *LRUNode // 虚拟尾节点 （最久未使用）
	mu sync.RWMutex
}

func NewLRUCache(capacity int) *LRUCache {
	if capacity <= 0 {
		panic("容量必须大于0")
	}
	
	lru := &LRUCache{
		capacity: capacity,
		cache: make(map[string]*LRUNode),
		head: &LRUNode{},
		tail: &LRUNode{},
	}
	
	// 初始化头尾节点的连接
	lru.head.next = lru.tail
	lru.tail.prev = lru.head
	
	return lru
}
// 将节点添加到头部（最近使用）
func (lru *LRUCache) addToHead(node *LRUNode) {
	node.prev = lru.head
	node.next = lru.head.next
	lru.head.next.prev = node
	lru.head.next = node
}

// 从链表中删除节点
func (lru *LRUCache) removeNode (node *LRUNode) {
	node.prev.next = node.next
	node.next.prev = node.prev
}

// 将节点移动到头部
func (lru *LRUCache) moveToHead(node *LRUNode) {
	lru.removeNode(node)
	lru.addToHead(node)
}

// 从链表中删除尾部节点 返回被删除的节点
func (lru *LRUCache) removeTail() *LRUNode {
	lastNode := lru.tail.prev
	lru.removeNode(lastNode)
	return lastNode
}

// SET
func (lru *LRUCache) Set(key, value string) {
	lru.mu.Lock()
	defer lru.mu.Unlock()
	if _, exists := lru.cache[key]; exists {
		lru.cache[key].value = value
		lru.moveToHead(lru.cache[key])
	} else {
		if lru.size == lru.capacity {
			lastNode := lru.removeTail()
			delete(lru.cache, lastNode.key)
			lru.size --
		}
		newNode := &LRUNode{key: key, value: value}
		lru.addToHead(newNode)
		lru.cache[key] = newNode
		lru.size ++
	}
}

func (lru *LRUCache) Get(key string) (string, bool) {
	lru.mu.RLock()
	node, exists := lru.cache[key]
	lru.mu.RUnlock()
	// 存在 升级写锁
	if exists {
		lru.mu.Lock()
		lru.moveToHead(node)
		lru.mu.Unlock()
		
		return node.value, true
	}
	// 不存在 返回空值和false
	return "", false
}

// 传入key 返回是否成功删除
func (lru *LRUCache) Delete(key string) bool {
	lru.mu.Lock()
	defer lru.mu.Unlock()
	
	if targetNode, exists := lru.cache[key]; exists {
		// 从链表中删除
		lru.removeNode(targetNode)
		// 从哈希表中删除
		delete(lru.cache, key)
		lru.size --
		return true
	}
	return false
}

func (lru *LRUCache) Size() int {
	return lru.size
}